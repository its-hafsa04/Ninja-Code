[
  {
    "id": "1",
    "title": "Two Sum",
    "difficulty": "Easy", 
    "description": "Given an array of integers and a target sum, return indices of two numbers that add up to the target.",
    "examples": [
      {
        "input": "[2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Only one valid answer exists"
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // Write your solution here\n};"
     },
    "testCases": [
      {
        "input": "[[2, 7, 11, 15], 9]",
        "expectedOutput": "[1, 0]",
        "explanation": "Basic test case with first two elements"
      },
      {
        "input": "[[3, 2, 4], 6]",
        "expectedOutput": "[2, 1]",
        "explanation": "Test case with target in middle of array"
      }
    ]
  },
  {
    "id": "2",
    "title": "Palindrome Number",
    "difficulty": "Easy",
    "description": "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.",
    "examples": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reads the same backward as forward"
      },
      {
        "input": "-121",
        "output": "false",
        "explanation": "-121 reads differently backward as forward"
      }
    ],
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    // Write your solution here\n};"
    },
    "testCases": [
      {
        "input": "121",
        "expectedOutput": "true",
        "explanation": "Positive palindrome number"
      },
      {
        "input": "-121",
        "expectedOutput": "false",
        "explanation": "Negative number is not a palindrome"
      },
      {
        "input": "10",
        "expectedOutput": "false",
        "explanation": "Number with leading zero is not a palindrome"
      }
    ]
  },
  {
    "id": "3",
    "title": "Remove Duplicates from Sorted Array",
    "difficulty": "Easy",
    "description": "Given a sorted array of integers, remove the duplicates in-place such that each element appears only once and return the new length.",
    "examples": [
      {
        "input": "[1,1,2]",
        "output": "2, [1,2,_]",
        "explanation": "Your function should return k = 2, with the first two elements of the modified array being 1 and 2 respectively"
      }
    ],
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "nums is sorted in non-decreasing order"
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    // Write your solution here\n};"
    },
    "testCases": [
      {
        "input": "[1,1,2]",
        "expectedOutput": "2",
        "explanation": "Remove duplicates from small array"
      },
      {
        "input": "[0,0,1,1,1,2,2,3,3,4]",
        "expectedOutput": "5",
        "explanation": "Remove duplicates from larger array"
      }
    ]
  },
  {
    "id": "4",
    "title": "Binary Search",
    "difficulty": "Medium",
    "description": "Implement a binary search algorithm to find the index of a target value in a sorted array. Return -1 if the target is not found.",
    "examples": [
      {
        "input": "[-1,0,3,5,9,12], target = 9",
        "output": "4",
        "explanation": "9 exists in the array at index 4"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 < nums[i], target < 10^4",
      "All numbers in nums are unique",
      "nums is sorted in ascending order"
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    // Write your solution here\n};"
    },
    "testCases": [
      {
        "input": "[[-1,0,3,5,9,12], 9]",
        "expectedOutput": "4",
        "explanation": "Target exists in the middle of the array"
      },
      {
        "input": "[[-1,0,3,5,9,12], 2]",
        "expectedOutput": "-1",
        "explanation": "Target does not exist in the array"
      }
    ]
  },
  {
    "id": "5",
    "title": "Maximum Subarray",
    "difficulty": "Hard",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "examples": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum = 6"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "starterCode": {
      "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function(nums) {\n    // Write your solution here\n};"
   },
    "testCases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expectedOutput": "6",
        "explanation": "Find maximum subarray sum with mixed positive and negative numbers"
      },
      {
        "input": "[1]",
        "expectedOutput": "1",
        "explanation": "Single element array"
      },
      {
        "input": "[5,4,-1,7,8]",
        "expectedOutput": "23",
        "explanation": "All positive numbers"
      }
    ]
  }
]